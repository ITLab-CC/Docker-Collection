version: "3.3"

services:
  ###############################################
  ####              journal                 #####
  ###############################################
  journal:
    build: ./build
    image: gh-inoda-journal
    container_name: journal
    restart: unless-stopped
    environment:
      - RAILS_ENV=production
      - SITE_DOMAIN=journal.${DOMAIN}
      - DATABASE_URL=postgres://journal:${POSTGRES_PASSWORD}@journal-db/journal
      - CIPHER_KEY=${CIPHER_KEY} # openssl rand -base64 32
      - SHARING_TOKEN_CIPHER_IV=${SHARING_TOKEN_CIPHER_IV} # openssl rand -base64 16
      - SECRET_KEY_BASE=${SECRET_KEY_BASE} # random alphanumerical
    networks:
      - proxy
      - journal
    labels:
      - "traefik.enable=true"                                                  #<== Enable traefik
      - "traefik.http.routers.journal-secured.rule=Host(`journal.${DOMAIN}`)"  #<== Set domain
      - "traefik.http.routers.journal-secured.entrypoints=websecure"           #<== Set entry point for HTTPS
      - "traefik.http.routers.journal-secured.tls.certresolver=mytlschallenge" #<== Set certsresolvers for https
      - "traefik.http.routers.journal-secured.middlewares=authelia"            #<== Add Authelia middlewares to protect login
      - "traefik.http.routers.journal-secured.service=journal-service"         #<== Set service
      - "traefik.http.services.journal-service.loadbalancer.server.port=3000"    #<== Set target port on container

  journal-db:
    image: postgres:alpine
    container_name: journal-db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "journal"]
    environment:
      - POSTGRES_DB=journal
      - POSTGRES_USER=journal
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./data/db:/var/lib/postgresql/data:rw
    networks:
      - journal
    restart: unless-stopped

networks:
  proxy:
    external: true
  journal:
    internal: true