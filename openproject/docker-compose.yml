x-op-restart-policy: &restart_policy
  restart: unless-stopped
x-op-image: &image
  image: openproject/community:${TAG:-13}
x-op-app: &app
  <<: [*image, *restart_policy]
  environment:
    OPENPROJECT_HTTPS: "true"
    OPENPROJECT_HOST__NAME: "openproject.${DOMAIN}"
    OPENPROJECT_HSTS: "${OPENPROJECT_HSTS:-true}"
    RAILS_CACHE_STORE: "memcache"
    OPENPROJECT_CACHE__MEMCACHE__SERVER: "openproject-cache:11211"
    OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
    DATABASE_URL: "postgres://postgres:${POSTGRES_PASSWORD:-p4ssw0rd}@db/openproject?pool=20&encoding=unicode&reconnect=true"
    RAILS_MIN_THREADS: ${RAILS_MIN_THREADS:-4}
    RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-16}
    # set to true to enable the email receiving feature. See ./docker/cron for more options
    IMAP_ENABLED: "${IMAP_ENABLED:-false}"
  volumes:
    - "./data/opdata:/var/openproject/assets"

services:
  openproject-db:
    container_name: openproject-db
    hostname: db
    image: postgres:13
    <<: *restart_policy
    stop_grace_period: "3s"
    volumes:
      - "./data/pgdata:/var/lib/postgresql/data"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-p4ssw0rd}
      POSTGRES_DB: openproject
    networks:
      - backend

  openproject-cache:
    container_name: openproject-cache
    image: memcached
    <<: *restart_policy
    networks:
      - backend

  openproject-proxy:
    container_name: openproject-proxy
    <<: [*image, *restart_policy]
    command: "./docker/prod/proxy"
    # ports:
    #   - "${PORT:-443}:80"
    environment:
      APP_HOST: openproject-web
      OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
    depends_on:
      - openproject-web
    networks:
      - frontend
      - proxy
    labels:
      - "traefik.enable=true"                                                  #<== Enable traefik
      - "traefik.http.routers.openproject-secured.rule=Host(`openproject.${DOMAIN}`)"  #<== Set domain
      - "traefik.http.routers.openproject-secured.entrypoints=websecure"           #<== Set entry point for HTTPS
      - "traefik.http.routers.openproject-secured.tls.certresolver=mytlschallenge" #<== Set certsresolvers for https
      - "traefik.http.routers.openproject-secured.middlewares=authelia"            #<== Add Authelia middlewares to protect login
      - "traefik.http.routers.openproject-secured.service=openproject-service"         #<== Set service
      - "traefik.http.services.openproject-service.loadbalancer.server.port=80"    #<== Set target port on container

  openproject-web:
    container_name: openproject-web
    <<: *app
    command: "./docker/prod/web"
    networks:
      - frontend
      - backend
    depends_on:
      - openproject-db
      - openproject-cache
      - openproject-seeder
    labels:
      - autoheal=true
    healthcheck:
      test: ["CMD", "curl", "-f", "https://openproject.${DOMAIN}${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}/health_checks/default"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  # openproject-autoheal:
  #   container_name: openproject-autoheal
  #   image: willfarrell/autoheal:1.2.0
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #   environment:
  #     AUTOHEAL_CONTAINER_LABEL: autoheal
  #     AUTOHEAL_START_PERIOD: 600
  #     AUTOHEAL_INTERVAL: 30

  openproject-worker:
    container_name: openproject-worker
    <<: *app
    command: "./docker/prod/worker"
    networks:
      - backend
    depends_on:
      - openproject-db
      - openproject-cache
      - openproject-seeder

  openproject-cron:
    container_name: openproject-cron
    <<: *app
    command: "./docker/prod/cron"
    networks:
      - backend
    depends_on:
      - openproject-db
      - openproject-cache
      - openproject-seeder

  openproject-seeder:
    container_name: openproject-seeder
    <<: *app
    command: "./docker/prod/seeder"
    restart: on-failure
    networks:
      - backend

networks:
  frontend:
  backend:
  proxy:
    external: true